// --------------------PROJECT : 19-Bit CPU ----------------------
// Arithmetic Logic Unit
module ALU(a, b, opcode, mode, outALU, za, zb, eq, gt, lt);
input [18:0]a;
input [18:0]b;
input [4:0] opcode;
input mode;
output reg [18:0] outALU; // Output of Arithmetic Logic Unit
output reg za, zb, eq, gt, lt;  // these are the flags

wire [18:0] outau; // Output of Arithmetic unit
wire [18:0] outlu; // Output of Logic unit
wire tza, tzb, teq, tgt, tlt;

// Instantiation of both Arithmetic & Logic unit 
arithmeticUnit a1(.a(a),.b(b),.opcode(opcode),.outau(outau));
logicUnit l1(.a(a),.b(b),.opcode(opcode),.outlu(outlu),.za(tza),.zb(tzb),.eq(teq),.gt(tgt),.lt(tlt));


//at every change of a, b, mode and opcode, we need to select the output.

always@(a,b,mode,opcode)begin
    if(mode == 0)begin
        outALU = outau;
    end
    else if (mode == 1)begin
        outALU = outlu;
    end
    else begin
        outALU = 19'b0000_0000_0000_0000_000;
    end

    za = tza; zb = tzb; eq = teq; gt = tgt; lt = tlt;
end
endmodule

//-----------------------Arithmetic Unit--------------------------------
module arithmeticUnit(a,b,opcode,outau);
input [18:0]a;
input [18:0]b;
input [4:0] opcode;
output reg [18:0]outau = 0;

always@(a,b,opcode)begin
    case(opcode)
    5'b00000: outau = a + b;
    5'b00001: if (a > b)begin
              outau = a - b;end
              else begin
              outau = b - a;end
    5'b00010: outau = a * b;
    5'b00011: if (a > b)begin
              outau = b / a;end
              else (a < b)begin
              outau = a / b;end
    5'b00100: outau = a + 1; // increment of a
    5'b00101: outau = b + 1; // increment of b
    5'b00110: outau = a - 1; // decrement of a
    5'b00111: outau = b - 1; // decrement of b
    default : outau = 19'b0000_0000_0000_0000_000;
    endcase
end
endmodule

//----------------------Logic Unit----------------------------
module logicUnit(a,b,opcode,outlu,eq,za,zb,gt,lt);
input [18:0]a;
input [18:0]b;
input [4:0] opcode;
output reg[18:0]outlu=0;
output reg za=0, zb=0, eq=0, gt=0, lt=0;

always@(a,b,opcode)begin
    case(opcode)
    5'b01000: outlu = a & b;  // bitwise and operation
    5'b01001: outlu = a | b; // bitwise or operation
    5'b01010: outlu = a ^ b; //bitwise xor operation
    5'b01011: outlu = ~a ; // bitwise not operation
    5'b01100: outlu = ~b ; // bitwise not operation
    endcase
end

always@(a,b)begin
    if (a == b)begin eq = 1;end
    else begin eq = 0;end

    if (a > b)begin gt = 1;end
    else begin gt = 0;end

    if (a < b)begin lt = 1;end
    else begin lt = 0; end

    if (a == 19'b0000_0000_0000_0000_000)begin za = 1;end
    else begin za = 0;end

    if (b == 19'b0000_0000_0000_0000_000)begin zb = 1;end
    else begin zb = 0;end
end
endmodule

//--------------------------------------------------------------------------------------------------------------------------------------
// Register A - the operation depends on clk and load
module regA(clk, loadA, dataAin, dataAOut);
input clk;
input loadA;
input [18:0]dataAin; 
output reg[18:0]dataAout;

reg [18:0]tempA; // Temporary register

always@(clk, loadA)begin
    if (loadA == 1)begin
      dataAout <= dataAin;
      tempA <= dataAin;
    end

    else if(loadA == 0)begin
      dataAout <= tempA;
    end
end
endmodule
//--------------------------------------------------------------------------------------------------------------------------------------
// Register B - the operation depends on clk and load
module regB(clk, loadB, dataBin, dataBout);
input clk;
input loadB;
input [18:0]dataBin;
output reg[18:0]dataBout;

reg [18:0]tempB;
always@(clk,loadB)begin
    if (loadB == 1)begin
        dataBout <= dataBin;
        tempB <= dataBin;
    end
    else if (load == 0)begin
        dataBout <= tempB;
    end
end
endmodule
//-------------------------------------------------------------------------------------------------------------------------------------
// Register C - the operation depends on clk and load
module regC(clk, loadC, dataCin, dataCout);
input clk;
input loadC;
input [18:0]dataCin;
output reg[18:0]dataCout;

reg[18:0]tempC;
always@(clk,loadC)begin
    if (load == 1)begin
        dataCout <= dataCin;
        tempC <= dataCin;
    end
    else if (load == 0)begin
        dataCout <= tempC;
    end
end
endmodule
//----------------------------------------------------------------------------------------------------------------------------------------
// Multiplexer (A) - also known as data selector 
module muxA(clk,in1, in2, sel, outA);
input clk;
input sel;
input [18:0]in1;
input [18:0]in2;
output reg [18:0]outA;

always@(posedge clk)
begin
    if (sel == 1)begin
        outA <= in1;
    end
    else if (sel == 0)begin
        outA <= in2;
    end
end
endmodule
//---------------------------------------------------------------------------------------------------------------------------------------
// Multiplexer (B) = also known as data selector 
module muxB(clk, in1, in2, sel, outB);
input clk;
input sel;
input [13:0]in1;
input [13:0]in2;
output reg [13:0]outB;

always@(posedge clk)begin
    if(sel == 1)begin
        outB <= in1;
    end
    else if (sel == 0)begin
        outB <= in2;
    end
end 
endmodule
//----------------------------------------------------------------------------------------------------------------------------------------
// Instruction memory in CPU
module instmem(clk, we_IM, dataIM, addIM, outIM);
input clk;
input we_IM;
input [18:0]dataIM;
input [13:0]addIM;
output reg [18:0]outIM;

// memory is an array stored at particular address
reg [18:0] mem [0:18];

always@(posedge clk)begin
    if (we_IM == 1)begin
        mem[addIM] = dataIM;
    end

    else if (we_IM == 0)begin
        outIM = mem[addIM];
    end
end
endmodule
//---------------------------------------------------------------------------------------------------------------------------------------
//Instruction Register 
module insReg(clk, opcode, loadIR, address, insIN);
input clk;
input [18:0] insIN;
output reg [13:0]address;
output reg [4:0]opcode;

reg [18:0]temp;
always@(posedge clk)begin
    if(load == 1)begin
        temp <= insIN;
    end
    address <= temp[13:0];
    opcode <= temp [18:14];
end
endmodule
//---------------------------------------------------------------------------------------------------------------------------------------
// Program Counter
module PC(clk, loadPC, incPC, address, execadd);
input clk;
input loadPC;
input incPC;
input[13:0]address;
output reg [13:0]execadd;

reg[13:0] temp;

always@( posedge clk)begin
    if (loadPC == 0 && incPC = 0)begin
        temp <= 14'b0000_0000_0000_00;
    end
    else if (loadPC == 1 && incPC == 0)begin
        temp <= address;
    end
    else if (loadPC == 0 && incPC == 1)begin
        temp <= temp + 14'b0000_0000_0000_01;
    end
    else begin
        temp <= temp;
    end
    execadd <= temp; // value of temporary reg is assigned to the output of the Program Counter
end
endmodule
//---------------------------------------------------------------------------------------------------------------------------------------
// Data Memory
module datamem(clk, we_DM, dataDM, addDM, outDM);
input clk;
input we_DM;
input [18:0]dataDM;
input [13:0]addDM;
output reg [18:0]outDM;

reg[18:0] mem [0:31];

always@(posedge clk)begin
    if(we_DM == 1)begin
        mem[addDM] = dataDM;
    end

    else if (we_DM == 0)begin
        outDM = mem[addDM];
    end
end
endmodule
//---------------------------------------------------------------------------------------------------------------------------------------
module controller (clk, en, opcode, loadA, loadB, loadC, loadPC, loadIR, incPC, mode, we_DM, selA, selB);
input clk,en;
input [3:0] opcode;
output reg loadA,loadB,loadC,loadIR,loadPC,incPC;
output reg mode, we_DM;
output reg selA,selB;

// registers to hold the value of state and next state
reg[2:0]state;
reg [2:0]next_state;

parameter reset 3'b000, load = 3'b010, execute = 3'b100;

//Code for operation of the CPU
always@(posedge clk)begin
    if(en == 0)begin
        state = reset;
    end
    else if (en == 1)begin
        state = next_state;
    end
end

// Now for the Output logic. Output logic depends on OPCODE and Enable signal
always@(*)
begin
	if ( en == 0 ) begin
	loadA = 0;
	loadB = 0;
	loadC = 0;
	loadIR = 0;
	loadPC = 0;
	incPC = 0;
	mode = 1'bZ;
	we_DM = 0;
	selA = 1'b0;
	selB = 1'b0;
	next_state = reset;
	end

	else begin
		
		case(state)
		// We just wait for a small duration of time in the same state to see if there is any change in input
		reset: 	begin
			loadA = 0;
			loadB = 0;
			loadC = 0;
			loadIR = 0;
			loadPC = 0;
			incPC = 0;
			mode = 1'bZ;
			we_DM = 0;
			selA = 1'b0;
			selB = 1'b0;
			next_state = load;
			end

		load:	begin
			loadA = 0;
			loadB = 0;
			loadC = 0;
			loadIR = 1;
			loadPC = 1;
			incPC = 0;
			mode = 1'bZ;
			we_DM = 0;
			selA = 1'b0;
			selB = 1'b0;
			next_state = execute;
			end

		execute:  begin
			case(opcode)
			// Mode 0, ALU operation for opcode 000
			0000: 	begin
				loadA = 0;
				loadB = 0;
				loadC = 0;
				loadIR = 0;
				loadPC = 0;
				incPC = 1;
				mode = 1'b0;
				we_DM = 1;
				#5 we_DM = 0;
				selA = 1'b0;
				selB = 1'b0;
				end
			// Mode 0, ALU operation for opcode 001
			0001: 	begin
				loadA = 0;
				loadB = 0;
				loadC = 0;
				loadIR = 0;
				loadPC = 0;
				incPC = 1;
				mode = 1'b0;
				we_DM = 1;
				#5 we_DM = 0;
				selA = 1'b0;
				selB = 1'b0;
				end
			// Mode 0, ALU operation for opcode 010
			0010: 	begin
				loadA = 0;
				loadB = 0;
				loadC = 0;
				loadIR = 0;
				loadPC = 0;
				incPC = 1;
				mode = 1'b0;
				we_DM = 1;
				#5 we_DM = 0;
				selA = 1'b0;
				selB = 1'b0;
				end
			// Mode 0, ALU operation for opcode 011
			0011: 	begin
				loadA = 0;
				loadB = 0;
				loadC = 0;
				loadIR = 0;
				loadPC = 0;
				incPC = 1;
				mode = 1'b0;
				we_DM = 1;
				#5 we_DM = 0;
				selA = 1'b0;
				selB = 1'b0;
				end
			// Load A operation
			0100: 	begin
				loadA = 1;
				loadB = 0;
				loadC = 0;
				loadIR = 0;
				loadPC = 0;
				incPC = 1;
				mode = 1'bZ;
				we_DM = 1;
				#5 we_DM = 0;
				selA = 1'b0;
				selB = 1'b0;
				end
			// Load B operation
			0101: 	begin
				loadA = 0;
				loadB = 1;
				loadC = 0;
				loadIR = 0;
				loadPC = 0;
				incPC = 1;
				mode = 1'bZ;
				we_DM = 1;
				#5 we_DM = 0;
				selA = 1'b0;
				selB = 1'b0;
				end
			// Load C operation
			0110: 	begin
				loadA = 0;
				loadB = 0;
				loadC = 1;
				loadIR = 0;
				loadPC = 0;
				incPC = 1;
				mode = 1'b0;
				we_DM = 1;
				#5 we_DM = 0;
				selA = 1'b0;
				selB = 1'b0;
				end
			// JMP translation
			0111: 	begin
				loadA = 0;
				loadB = 0;
				loadC = 0;
				loadIR = 0;
				loadPC = 1;
				incPC = 1;
				mode = 1'b0;
				we_DM = 1;
				selA = 1'b1;
				selB = 1'b1;
				end
			// Mode 1, ALU operation for opcode 000
			1000: 	begin
				loadA = 0;
				loadB = 0;
				loadC = 0;
				loadIR = 0;
				loadPC = 0;
				incPC = 1;
				mode = 1'b1;
				we_DM = 1;
				#5 we_DM = 0;
				selA = 1'b0;
				selB = 1'b0;
				end
			// Mode 1, ALU operation for opcode 001
			1001: 	begin
				loadA = 0;
				loadB = 0;
				loadC = 0;
				loadIR = 0;
				loadPC = 0;
				incPC = 1;
				mode = 1'b1;
				we_DM = 1;
				selA = 1'b0;
				selB = 1'b0;
				end
			// Mode 1, ALU operation for opcode 010
			1010: 	begin
				loadA = 0;
				loadB = 0;
				loadC = 0;
				loadIR = 0;
				loadPC = 0;
				incPC = 1;
				mode = 1'b1;
				we_DM = 1;
				#5 we_DM = 0;
				selA = 1'b0;
				selB = 1'b0;
				end
			// Mode 1, ALU operation for opcode 011
			1011: 	begin
				loadA = 0;
				loadB = 0;
				loadC = 0;
				loadIR = 0;
				loadPC = 0;
				incPC = 1;
				mode = 1'b1;
				we_DM = 1;
				#5 we_DM = 0;
				selA = 1'b0;
				selB = 1'b0;
				end
			// Mode 1, ALU operation for opcode 100
			1100: 	begin
				loadA = 0;
				loadB = 0;
				loadC = 0;
				loadIR = 0;
				loadPC = 0;
				incPC = 1;
				mode = 1'b1;
				we_DM = 1;
				#5 we_DM = 0;
				selA = 1'b0;
				selB = 1'b0;
				end
			// Mode 1, ALU operation for opcode 101
			1101: 	begin
				loadA = 0;
				loadB = 0;
				loadC = 0;
				loadIR = 0;
				loadPC = 0;
				incPC = 1;
				mode = 1'b1;
				we_DM = 1;
				#5 we_DM = 0;
				selA = 1'b0;
				selB = 1'b0;
				end
			// Mode 1, ALU operation for opcode 110
			1110: 	begin
				loadA = 0;
				loadB = 0;
				loadC = 0;
				loadIR = 0;
				loadPC = 0;
				incPC = 1;
				mode = 1'b1;
				we_DM = 1;
				#5 we_DM = 0;
				selA = 1'b0;
				selB = 1'b0;
				end
			// Mode 1, ALU operation for opcode 111
			1111:	begin
				loadA = 0;
				loadB = 0;
				loadC = 0;
				loadIR = 0;
				loadPC = 0;
				incPC = 1;
				mode = 1'b1;
				we_DM = 1;
				selA = 1'b0;
				selB = 1'b0;
				end
			default: begin
				loadA = 0;
				loadB = 0;
				loadC = 0;
				loadIR = 1;
				mode = 1'bZ;
				we_DM = 0;
				selA = 1'b0;
				selB = 1'b0;
				end
			endcase
			next_state = load;
			end
			
		default: begin
			loadA = 0;
			loadB = 0;
			loadC = 0;
			loadIR = 1;
			mode = 1'bZ;
			we_DM = 0;
			selA = 1'b0;
			selB = 1'b0;
			next_state = reset;
			end
		endcase
	end
end
endmodule
//-----------------------------------------------------------------------------------------------------------------------------------
/////	Design of the 19-Bit CPU is shown below
module CPU(clk, en, we_IM, codein, immd, za, zb, eq, gt, lt);
input clk;
input en;
input we_IM;
input [18:0] codein;
input [13:0] immd;
output za;
output zb;
output eq;
output gt;
output lt;

reg za;
reg zb;
reg eq;
reg gt;
reg lt;

wire [13:0] curradd; wire [18:0] outIMd; wire [13:0] addressd; wire [4:0] opcodeD;
wire loadIRd, loadAd, loadBd, loadCd, moded, we_DMd, selAd, selBd, loadPCd, incPCd;
wire [13:0] execaddd; wire [18:0] dataAoutd; wire [18:0] dataBoutd; wire [31:0] outALUd;
wire [31:0] currdat; wire [31:0] outDMd; wire [31:0] dataCoutd;
wire zad, zbd, eqd, gtd, ltd;


instmem 	a1 (.clk(clk), .we_IM(we_IM), .dataIM(codein), .addIM(curradd), .outIM(outIMd));
insReg 		a2 (.clk(clk), .loadIR(loadIRd), .insin(outIMd), .address(addressd), .opcode(opcodeD));
controller 	a3 (.clk(clk), .en(en), .opcode(opcodeD), .loadA(loadAd), .loadB(loadBd), .loadC(loadCd), .loadIR(loadIRd), .loadPC(loadPCd), .incPC(incPCd), .mode(moded), .we_DM(we_DMd), .selA(selAd), .selB(selBd));
PC 		a4 (.clk(clk), .loadPC(loadPCd), .incPC(incPCd), .address(addressd), .execadd(execaddd));
muxB		a5 (.clk(clk), .in1(execaddd), .in2(immd), .sel(selBd), .outB(curradd));
regA 		a6 (.clk(clk), .loadA(loadAd), .dataAin(outDMd[18:0]), .dataAout(dataAoutd));
regB 		a7 (.clk(clk), .loadB(loadBd), .dataBin(outDMd[31:13]), .dataBout(dataBoutd));
regC		a8 (.clk(clk), .loadC(loadCd), .dataCin(currdat), .dataCout(dataCoutd));
datamem 	a9 (.clk(clk), .we_DM(we_DMd), .dataDM(dataCoutd), .addDM(addressd), .outDM(outDMd));
muxA		b1 (.clk(clk), .in1(outALUd), .in2({4'b0000,immd}), .sel(selAd), .outA(currdat));
ALU 		b2 (.a(dataAoutd), .b(dataBoutd), .opcode(opcodeD[4:0]), .mode(moded), .outALU(outALUd), .za(zad), .zb(zbd), .eq(eqd), .gt(gtd), .lt(ltd));

endmodule












             
             

    









